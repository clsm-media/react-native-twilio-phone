{"version":3,"sources":["RNTwilioPhone.ts"],"names":["defaultOptions","requestPermissionsOnInit","RNTwilioPhone","initialize","callKeepOptions","fetchAccessToken","options","unsubscribeCallKeep","initializeCallKeep","console","log","unsubscribeTwilioPhone","listenTwilioPhone","handleBackgroundState","startCall","accessToken","TwilioPhone","uuid","toLowerCase","calls","sid","unregister","deviceToken","removeTwilioPhoneListeners","subscriptions","twilioPhoneEmitter","addListener","EventType","CallConnected","callSid","CallDisconnected","getCallUUID","removeCall","CallDisconnectedError","map","subscription","remove","removeAllListeners","CallInvite","CancelledCallInvite","CallRinging","index","i","length","splice","call"],"mappings":"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","sourcesContent":["// import messaging from '@react-native-firebase/messaging';\n// import RNCallKeep, { IOptions } from 'react-native-callkeep';\nimport {\n  EventType,\n  TwilioPhone,\n  twilioPhoneEmitter,\n} from 'react-native-twilio-phone';\n// import VoipPushNotification from 'react-native-voip-push-notification';\nimport ramdomUuid from 'uuid-random';\n\nexport type RNTwilioPhoneOptions = {\n  requestPermissionsOnInit: boolean; // Default: true\n};\n\ntype Call = {\n  uuid: string | null;\n  sid: string | null;\n};\n\ntype TwilioOptions = {\n  to: string,\n  from: string,\n  calleeName: string,\n  record: string,\n  callLogId: string,\n  api_token: string\n}\n\nconst defaultOptions: RNTwilioPhoneOptions = {\n  requestPermissionsOnInit: false,\n};\n\n// const CK_CONSTANTS = {\n//   END_CALL_REASONS: {\n//     FAILED: 1,\n//     REMOTE_ENDED: 2,\n//     UNANSWERED: 3,\n//     ANSWERED_ELSEWHERE: 4,\n//     DECLINED_ELSEWHERE: 5,\n//     MISSED: 6,\n//   },\n// };\n\nclass RNTwilioPhone {\n  static calls: Call[] = [];\n\n  private static fetchAccessToken: () => Promise<string>;\n  private static deviceToken: string | null = null;\n  // private static activeCall: Call | null = null;\n\n  static initialize(\n    callKeepOptions: {},\n    fetchAccessToken: () => Promise<string>,\n    options = defaultOptions\n  ) {\n    const unsubscribeCallKeep = RNTwilioPhone.initializeCallKeep(\n      callKeepOptions,\n      fetchAccessToken,\n      options\n    );\n\n    // const unsubscribeRegisterAndroid = RNTwilioPhone.registerAndroid();\n    // const unsubscribeRegisterIOS = RNTwilioPhone.registerIOS();\n\n    return () => {\n      unsubscribeCallKeep();\n      // unsubscribeRegisterAndroid();\n      // unsubscribeRegisterIOS();\n    };\n  }\n\n  static initializeCallKeep(\n    callKeepOptions: {},\n    fetchAccessToken: () => Promise<string>,\n    options = defaultOptions\n  ) {\n    // const { requestPermissionsOnInit } = options;\n    console.log(callKeepOptions, options)\n\n    RNTwilioPhone.fetchAccessToken = fetchAccessToken;\n\n    // if (Platform.OS === 'ios' || requestPermissionsOnInit) {\n    //   RNCallKeep.setup(callKeepOptions)\n    //     .then(() => {\n    //       RNCallKeep.setAvailable(true);\n    //     })\n    //     .catch((e) => console.log(e));\n    // } else {\n    //   RNCallKeep.registerPhoneAccount();\n    //   RNCallKeep.registerAndroidEvents();\n    //   RNCallKeep.setAvailable(true);\n    // }\n\n    const unsubscribeTwilioPhone = RNTwilioPhone.listenTwilioPhone();\n    // const unsubscribeCallKeep = RNTwilioPhone.listenCallKeep();\n\n    return () => {\n      unsubscribeTwilioPhone();\n      // unsubscribeCallKeep();\n    };\n  }\n\n  static handleBackgroundState() {\n  //   if (Platform.OS !== 'android') {\n  //     return;\n  //   }\n\n  //   messaging().setBackgroundMessageHandler(async (remoteMessage) => {\n  //     if (!remoteMessage.data) {\n  //       return;\n  //     }\n\n  //     RNCallKeep.registerPhoneAccount();\n  //     RNCallKeep.registerAndroidEvents();\n  //     RNCallKeep.setAvailable(true);\n\n  //     RNTwilioPhone.listenTwilioPhone();\n  //     RNTwilioPhone.listenCallKeep();\n\n  //     TwilioPhone.handleMessage(remoteMessage.data);\n  //   });\n  }\n\n  static async startCall(options: TwilioOptions) {\n    const accessToken = await RNTwilioPhone.fetchAccessToken();\n    // const params: ConnectParams = { ...options };\n\n    // if (from) {\n    //   params.from = from;\n    // }\n    // console.log('access token is', accessToken)\n    // console.log('options are', options)\n    TwilioPhone.startCall(accessToken, options);\n\n    const uuid = ramdomUuid().toLowerCase();\n    // RNTwilioPhone.activeCall = { uuid: uuid, sid: null };\n    RNTwilioPhone.calls = [{ uuid, sid: '' }]\n\n    // RNCallKeep.startCall(uuid, options.to, options.calleeName, 'generic', false);\n  }\n\n  static async unregister() {\n    if (!RNTwilioPhone.deviceToken) {\n      return;\n    }\n\n    const accessToken = await RNTwilioPhone.fetchAccessToken();\n    TwilioPhone.unregister(accessToken, RNTwilioPhone.deviceToken);\n  }\n\n  // private static registerAndroid() {\n  //   if (Platform.OS !== 'android') {\n  //     return () => {};\n  //   }\n\n    // messaging()\n    //   .getToken()\n    //   .then(RNTwilioPhone.registerTwilioPhone)\n    //   .catch((e) => console.log(e));\n\n    // Listen to whether the token changes\n    // const unsubscribeTokenRefresh = messaging().onTokenRefresh(\n    //   RNTwilioPhone.registerTwilioPhone\n    // );\n\n    // const unsubscribeMessage = messaging().onMessage((remoteMessage) => {\n    //   if (remoteMessage.data) {\n    //     TwilioPhone.handleMessage(remoteMessage.data);\n    //   }\n    // });\n\n    // return () => {\n    //   unsubscribeTokenRefresh();\n    //   unsubscribeMessage();\n    // };\n  // }\n\n  // private static registerIOS() {\n  //   if (Platform.OS !== 'ios') {\n  //     return () => {};\n  //   }\n\n    // VoipPushNotification.registerVoipToken();\n\n    // VoipPushNotification.addEventListener(\n    //   'register',\n    //   RNTwilioPhone.registerTwilioPhone\n    // );\n\n    // VoipPushNotification.addEventListener(\n    //   'notification',\n    //   (notification: any) => {\n    //     delete notification.aps;\n    //     TwilioPhone.handleMessage(notification);\n    //   }\n    // );\n\n    // return () => {\n    //   VoipPushNotification.removeEventListener('register');\n    //   VoipPushNotification.removeEventListener('notification');\n    // };\n  // }\n\n  private static listenTwilioPhone() {\n    RNTwilioPhone.removeTwilioPhoneListeners();\n\n    const subscriptions = [\n      // twilioPhoneEmitter.addListener(\n      //   EventType.CallInvite,\n      //   ({ callSid, from }) => {\n      //     // Incoming call is already reported to CallKit on iOS\n      //     if (Platform.OS === 'android') {\n      //       const uuid = ramdomUuid().toLowerCase();\n      //       RNTwilioPhone.addCall({ uuid, sid: callSid });\n\n      //       RNCallKeep.displayIncomingCall(uuid, from);\n      //     }\n      //   }\n      // ),\n      // twilioPhoneEmitter.addListener(\n      //   EventType.CancelledCallInvite,\n      //   ({ callSid }) => {\n      //     const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n      //     if (uuid) {\n      //       RNCallKeep.reportEndCallWithUUID(\n      //         uuid,\n      //         CK_CONSTANTS.END_CALL_REASONS.MISSED\n      //       );\n\n      //       RNTwilioPhone.removeCall(uuid);\n      //     }\n      //   }\n      // ),\n      // twilioPhoneEmitter.addListener(EventType.CallRinging, ({ callSid }) => {\n      //   if (RNTwilioPhone.activeCall) {\n      //     RNTwilioPhone.activeCall.sid = callSid;\n\n      //     if (RNTwilioPhone.activeCall.uuid) {\n      //       RNTwilioPhone.addCall(RNTwilioPhone.activeCall);\n      //       RNTwilioPhone.activeCall = null;\n      //     }\n      //   }\n      // }),\n      twilioPhoneEmitter.addListener(EventType.CallConnected, \n        ({ callSid }) => {\n          console.log(callSid)\n        // const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n        // uuid && RNCallKeep.setCurrentCallActive(uuid);\n      }),\n      twilioPhoneEmitter.addListener(\n        EventType.CallDisconnected,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            // RNCallKeep.reportEndCallWithUUID(\n            //   uuid,\n            //   CK_CONSTANTS.END_CALL_REASONS.REMOTE_ENDED\n            // );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n      twilioPhoneEmitter.addListener(\n        EventType.CallDisconnectedError,\n        ({ callSid }) => {\n          const uuid = RNTwilioPhone.getCallUUID(callSid);\n\n          if (uuid) {\n            // RNCallKeep.reportEndCallWithUUID(\n            //   uuid,\n            //   CK_CONSTANTS.END_CALL_REASONS.FAILED\n            // );\n\n            RNTwilioPhone.removeCall(uuid);\n          }\n        }\n      ),\n    ];\n\n    return () => {\n      subscriptions.map((subscription) => {\n        subscription.remove();\n      });\n    };\n  }\n\n  // private static listenCallKeep() {\n  //   RNTwilioPhone.removeCallKeepListeners();\n\n  //   if (Platform.OS === 'ios') {\n  //     RNCallKeep.addEventListener(\n  //       'didDisplayIncomingCall',\n  //       ({ callUUID, payload }) => {\n  //         RNTwilioPhone.addCall({ uuid: callUUID, sid: payload.twi_call_sid });\n  //       }\n  //     );\n\n  //     RNCallKeep.addEventListener('didResetProvider', () => {\n  //       TwilioPhone.deactivateAudio();\n  //     });\n\n  //     RNCallKeep.addEventListener('didActivateAudioSession', () => {\n  //       TwilioPhone.activateAudio();\n  //     });\n\n  //     RNCallKeep.addEventListener('didDeactivateAudioSession', () => {\n  //       TwilioPhone.deactivateAudio();\n  //     });\n  //   }\n\n  //   RNCallKeep.addEventListener('didReceiveStartCallAction', ({ callUUID }) => {\n  //     if (RNTwilioPhone.activeCall) {\n  //       RNTwilioPhone.activeCall.uuid = callUUID;\n\n  //       if (RNTwilioPhone.activeCall.sid) {\n  //         RNTwilioPhone.addCall(RNTwilioPhone.activeCall);\n  //         RNTwilioPhone.activeCall = null;\n  //       }\n  //     }\n  //   });\n\n  //   // RNCallKeep.addEventListener('answerCall', ({ callUUID }) => {\n  //   //   const sid = RNTwilioPhone.getCallSid(callUUID);\n\n  //   //   sid && TwilioPhone.acceptCallInvite(sid);\n  //   // });\n\n  //   RNCallKeep.addEventListener('endCall', ({ callUUID }) => {\n  //     const sid = RNTwilioPhone.getCallSid(callUUID);\n\n  //     sid && TwilioPhone.endCall(sid);\n\n  //     RNTwilioPhone.removeCall(callUUID);\n  //   });\n\n  //   RNCallKeep.addEventListener(\n  //     'didPerformSetMutedCallAction',\n  //     ({ callUUID, muted }) => {\n  //       const sid = RNTwilioPhone.getCallSid(callUUID);\n\n  //       sid && TwilioPhone.toggleMuteCall(sid, muted);\n  //     }\n  //   );\n\n  //   RNCallKeep.addEventListener(\n  //     'didToggleHoldCallAction',\n  //     ({ callUUID, hold }) => {\n  //       const sid = RNTwilioPhone.getCallSid(callUUID);\n\n  //       sid && TwilioPhone.toggleHoldCall(sid, hold);\n  //     }\n  //   );\n\n  //   RNCallKeep.addEventListener(\n  //     'didPerformDTMFAction',\n  //     ({ callUUID, digits }) => {\n  //       const sid = RNTwilioPhone.getCallSid(callUUID);\n\n  //       sid && TwilioPhone.sendDigits(sid, digits);\n  //     }\n  //   );\n\n  //   return () => {\n  //     RNTwilioPhone.removeCallKeepListeners();\n  //   };\n  // }\n\n  private static removeTwilioPhoneListeners() {\n    twilioPhoneEmitter.removeAllListeners(EventType.CallInvite);\n    twilioPhoneEmitter.removeAllListeners(EventType.CancelledCallInvite);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallRinging);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallConnected);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallDisconnected);\n    twilioPhoneEmitter.removeAllListeners(EventType.CallDisconnectedError);\n  }\n\n  // private static removeCallKeepListeners() {\n  //   if (Platform.OS === 'ios') {\n  //     RNCallKeep.removeEventListener('didDisplayIncomingCall');\n  //     RNCallKeep.removeEventListener('didResetProvider');\n  //     RNCallKeep.removeEventListener('didActivateAudioSession');\n  //     RNCallKeep.removeEventListener('didDeactivateAudioSession');\n  //   }\n\n  //   RNCallKeep.removeEventListener('didReceiveStartCallAction');\n  //   RNCallKeep.removeEventListener('answerCall');\n  //   RNCallKeep.removeEventListener('endCall');\n  //   RNCallKeep.removeEventListener('didPerformSetMutedCallAction');\n  //   RNCallKeep.removeEventListener('didToggleHoldCallAction');\n  //   RNCallKeep.removeEventListener('didPerformDTMFAction');\n  // }\n\n  // private static async registerTwilioPhone(deviceToken: string) {\n  //   try {\n  //     const accessToken = await RNTwilioPhone.fetchAccessToken();\n\n  //     TwilioPhone.register(accessToken, deviceToken);\n  //     RNTwilioPhone.deviceToken = deviceToken;\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // }\n\n  // private static addCall(call: Call) {\n  //   RNTwilioPhone.calls.push(call);\n  // }\n\n  private static removeCall(uuid: string) {\n    let index = -1;\n\n    for (let i = 0; i < RNTwilioPhone.calls.length; i++) {\n      if (RNTwilioPhone.calls[i].uuid === uuid) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index > -1) {\n      RNTwilioPhone.calls.splice(index, 1);\n    }\n  }\n\n  private static getCallUUID(sid: string) {\n    for (const call of RNTwilioPhone.calls) {\n      if (call.sid === sid) {\n        return call.uuid;\n      }\n    }\n\n    return null;\n  }\n\n  // private static getCallSid(uuid: string) {\n  //   for (const call of RNTwilioPhone.calls) {\n  //     if (call.uuid === uuid) {\n  //       return call.sid;\n  //     }\n  //   }\n\n  //   return null;\n  // }\n}\n\nexport { RNTwilioPhone };\n"]}